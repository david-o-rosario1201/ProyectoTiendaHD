@page "/"
@using System.Text
@rendermode InteractiveServer
@inject NavigationManager navigation
@inject ModeloNegocioService modeloNegocioService
@inject UsuarioService usuarioService
@inject SegmentoMercadoService segmentoMercadoService
@inject PropuestaValorService propuestaValorService
@inject ClienteService clienteService

<PageTitle>Simulaci&oacute;n</PageTitle>

<h1 class="text-center"><strong>Bienvenido a la simulación<br />de tu Modelo de Negocio</strong></h1>

<div class="card-container">
    <div class="card">
        <strong>Clientes</strong>
        <p>Cantidad: @clientes.Count</p>
        <button class="btn" @onclick="MostrarModal">Agregar</button>
    </div>

    <div class="card">
        <img src="https://img.icons8.com/ios-filled/50/settings.png" alt="Config" class="icon" />
        <button class="btn" @onclick="MostrarModalConfiguracion">Cambiar Configuracion</button>
    </div>
</div> <!-- FIN card-container -->

<!-- 🧾 Mostrar datos del cliente debajo -->
@if (clientes != null && clientes.Any())
{
    @foreach (var cliente in clientes)
    {
        <div class="card-body mb-4">
            <h4>Datos del Cliente</h4>
            <ul>
                <li><strong>Nombre:</strong> @cliente.Nombre</li>
                <li><strong>Gustos que coinciden:</strong></li>
                <li><strong>Segmento de mercado:</strong></li>

                @if (cliente.CoincidenciasSegmento != null && cliente.CoincidenciasSegmento.Any())
                {
                    @foreach (var coincidencia in cliente.CoincidenciasSegmento)
                    {
                        <li>@coincidencia.Descripcion</li>
                    }
                }
                else
                {
                    <li>No hay coincidencias con el segmento.</li>
                }

                @if (cliente.CoincidenciasPropuestaValor != null && cliente.CoincidenciasPropuestaValor.Any())
                {
                    @foreach (var coincidencia in cliente.CoincidenciasPropuestaValor)
                    {
                        <li>@coincidencia.Descripcion</li>
                    }
                }
                else
                {
                    <li>No hay coincidencias con la propuesta de valor.</li>
                }

                @if (cliente.CoincidenciasCanales != null && cliente.CoincidenciasCanales.Any())
                {
                    @foreach (var coincidencia in cliente.CoincidenciasCanales)
                    {
                        <li>@coincidencia.Descripcion</li>
                    }
                }
                else
                {
                    <li>No hay coincidencias con los canales de distribuci&oacute;n</li>
                }

                @if (cliente.CoincidenciasActividades != null && cliente.CoincidenciasActividades.Any())
                {
                    @foreach (var coincidencia in cliente.CoincidenciasActividades)
                    {
                        <li>@coincidencia.Descripcion</li>
                    }
                }
                else
                {
                    <li>No hay coincidencias con las actividades de valor</li>
                }

                <li>
                    <strong>Porcentaje:</strong> @cliente.PorcentajeCoincidencias (%)
                    <span class="color-circulo @ObtenerColorPorcentaje(cliente.PorcentajeCoincidencias ?? 0)"></span>
                </li>
            </ul>
        </div>
    }
}
else
{
    <p>No hay clientes disponibles.</p>
}




@if (mostrarModal)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3 class="modal-titulo">Creación de Cliente</h3>

            <div class="form-row">
                <div class="form-group">
                    <label><strong>Nombre</strong></label>
                    <InputText class="form-control" placeholder="Miguel Jiménez" @bind-Value="cliente.Nombre" />
                </div>
                <div class="form-group">
                    <label><strong>Edad</strong></label>
                    <InputNumber class="form-control" placeholder="45" @bind-Value="cliente.Edad" />
                </div>
            </div>

            <hr class="divider" />


            <div class="form-group">
                <label>¿Cuáles son sus gustos?</label>
                <div class="form-row">
                    <input class="form-input flex-fill" @bind="gusto" placeholder="Gustos" />
                    <button class="btn-agregar" @onclick="AgregarGusto">Agregar</button>
                </div>
            </div>

            @if (cliente.DetallesGusto.Any())
            {
                <div class="tabla-gustos">
                    <table>
                        <thead>
                            <tr>
                                <th>Gustos</th>
                                <th>Opciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var gusto in cliente.DetallesGusto)
                            {
                                <tr>
                                    <td>@gusto.Descripcion</td>
                                    <td>
                                        <button class="btn-eliminar" @onclick="() => EliminarGusto(gusto)">🗑️</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }

            <div class="form-actions justify-content-center">
                <button class="btn-guardar" @onclick="Guardar">Guardar</button>
                <button class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
            </div>
        </div>
    </div>
}


@if (mostrarModalConfiguracion)
{
    @if (mostrarModalConfiguracion)
    {
        <div class="modal-overlay">
            <div class="modal-content configuracion-content">
                <h3 class="modal-titulo">Menú de Configuración</h3>

                <div class="configuracion-grid">
                    <div class="configuracion-seccion">
                        <h4>Propuesta de valor</h4>
                        <button class="btn" @onclick="MostrarModalPropuestaValor">Ver</button>
                    </div>

                    <div class="configuracion-seccion">
                        <h4>Actividades Claves</h4>
                        <button class="btn" @onclick="MostrarModalActividades">Ver</button>
                    </div>

                    <div class="configuracion-seccion">
                        <h4>Canales de distribución</h4>
                        <button class="btn" @onclick="MostrarModalCanalDis">Ver</button>
                    </div>

                    <div class="configuracion-seccion">
                        <h4>Ingresos / Precios</h4>
                        <button class="btn" @onclick="MostrarModalIngresos">Ver</button>
                    </div>

                    <div class="configuracion-seccion">
                        <h4>Relación cliente</h4>
                        <button class="btn" @onclick="MostrarModalRelacionCliente">Ver</button>
                    </div>

                    <div class="configuracion-seccion">
                        <h4>Segmento de mercado</h4>
                        <button class="btn" @onclick="MostrarModalSegmentoMercado">Ver</button>
                    </div>
                </div>

                <div class="form-actions">
                    <button class="btn btn-secondary" @onclick="CerrarModalConfiguracion">Cerrar</button>
                </div>
            </div>
        </div>
    }
}


@if (mostrarModalPropuestaValor)
{
    <div class="modal-overlay">
        <div class="modal-content propuesta-valor-content">
            <h3 class="modal-titulo">Menú de Configuración</h3>

            <div class="propuesta-valor-container">
                <h4>¿Cuál es tu Propuesta de Valor?</h4>

                <div class="form-group">
                    <textarea class="form-control propuesta-textarea"
                    @bind="modeloNegocio.PropuestaValor.Descripcion"
                    placeholder="Describe tu propuesta de valor..."></textarea>
                </div>

                <div class="propuesta-guardar">
                    <button class="btn-guardar" @onclick="GuardarPropuestaValor">Guardar</button>
                </div>
            </div>

            <div class="form-actions">
                <button class="btn btn-secondary" @onclick="CerrarModalPropuestaValor">Cerrar</button>
            </div>
        </div>
    </div>
}


@if (mostrarModalActividades)
{
    <div class="modal-overlay">
        <div class="modal-content actividades-content">
            <h3 class="modal-titulo">Menú de Configuración</h3>

            <div class="actividades-container">
                <h4>Actividades Claves</h4>

                <div class="actividades-actions">
                    <button class="btn-agregar" @onclick="CerrarModalActividades">Volver</button>
                    <button class="btn-agregar" @onclick="MostrarModalAgregarActividad">Agregar</button>
                </div>

                <div class="actividades-table-container">
                    <table class="actividades-table">
                        <thead>
                            <tr>
                                <th>Descripción</th>
                                <th>Opciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var actividad in modeloNegocio.Actividades)
                            {
                                <tr>
                                    <td>@actividad.Descripcion</td>
                                    <td>
                                        <button class="btn-eliminar" @onclick="() => EliminarActividad(actividad)">✅</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}


@if (mostrarModalAgregarActividad)
{
    <div class="modal-overlay">
        <div class="modal-content actividades-clave-content">
            <h3 class="modal-titulo">¿Cuáles son tus actividades claves?</h3>

            <div class="agregar-actividad">
                <div class="agregar-input-container">
                    <InputText class="form-control" @bind-Value="nuevaActividadDescripcion"
                    placeholder="Ej: Cafetera industrial" />
                    <button class="btn-agregar" @onclick="AgregarActividad">Agregar</button>
                </div>
            </div>

            <div class="actividades-table-container">
                <table class="actividades-table">
                    <thead>
                        <tr>
                            <th>Descripción</th>
                            <th>Opciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var actividad in modeloNegocio.Actividades)
                        {
                            <tr>
                                <td>@actividad.Descripcion</td>
                                <td>
                                    <button class="btn-opcion" @onclick="() => EliminarActividad(actividad)">💬</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="form-actions">
                <button class="btn-guardar" @onclick="GuardarActividades">Guardar</button>
            </div>
        </div>
    </div>
}


@if (mostrarModalCanalDis)
{
    <div class="modal-overlay">
        <div class="modal-content actividades-content">
            <h3 class="modal-titulo">Menú de Configuración</h3>

            <div class="actividades-container">
                <h4>Canal de distribuci&oacute;n</h4>

                <div class="actividades-actions">
                    <button class="btn-agregar" @onclick="CerrarModalCanalDis">Volver</button>
                    <button class="btn-agregar" @onclick="MostrarModalAgregarCanal">Agregar</button>
                </div>

                <div class="actividades-table-container">
                    <table class="actividades-table">
                        <thead>
                            <tr>
                                <th>Descripción</th>
                                <th>Opciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var canal in modeloNegocio.Canales)
                            {
                                <tr>
                                    <td>@canal.Descripcion</td>
                                    <td>
                                        <button class="btn-eliminar" @onclick="() => EliminarCanal(canal)">✅</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarModalAgregarCanal)
{
    <div class="modal-overlay">
        <div class="modal-content actividades-clave-content">
            <h3 class="modal-titulo">Canal de Distribuci&oacute;n</h3>

            <div class="agregar-actividad">
                <div class="agregar-input-container">
                    <InputText class="form-control" @bind-Value="nuevaCanalDescripcion"
                               placeholder="Ej: Cafetera industrial" />
                    <button class="btn-agregar" @onclick="AgregarActividad">Agregar</button>
                </div>
            </div>

            <div class="actividades-table-container">
                <table class="actividades-table">
                    <thead>
                        <tr>
                            <th>Descripción</th>
                            <th>Opciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var actividad in modeloNegocio.Canales)
                        {
                            <tr>
                                <td>@actividad.Descripcion</td>
                                <td>
                                    <button class="btn-opcion" @onclick="() => EliminarCanal(actividad)">💬</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="form-actions">
                <button class="btn-guardar" @onclick="GuardarCanal">Guardar</button>
            </div>
        </div>
    </div>
}


@if (mostrarModalIngresos)
{
    <div class="modal-overlay">
        <div class="modal-content actividades-content">
            <h3 class="modal-titulo">Menú de Configuración</h3>

            <div class="actividades-container">
                <h4>Ingresos / Precios</h4>

                <div class="actividades-actions">
                    <button class="btn-agregar" @onclick="CerrarModalIngresos">Volver</button>
                    <button class="btn-agregar" @onclick="MostrarModalAgregarIngresos">Agregar</button>
                </div>

                <div class="actividades-table-container">
                    <table class="actividades-table">
                        <thead>
                            <tr>
                                <th>Descripción</th>
                                <th>Opciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var ingresos in modeloNegocio.Ingresos)
                            {
                                <tr>
                                    <td>@ingresos.Descripcion</td>
                                    <td>
                                        <button class="btn-eliminar" @onclick="() => EliminarIngresos(ingresos)">✅</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarModalAgregarIngresos)
{
    <div class="modal-overlay">
        <div class="modal-content actividades-clave-content">
            <h3 class="modal-titulo">Ingresos / Precios</h3>

            <div class="agregar-actividad">
                <div class="agregar-input-container">
                    <InputText class="form-control" @bind-Value="nuevaIngresoDescripcion"
                               placeholder="Ej: Cafetera industrial" />
                    <button class="btn-agregar" @onclick="AgregarIngresos">Agregar</button>
                </div>
            </div>

            <div class="actividades-table-container">
                <table class="actividades-table">
                    <thead>
                        <tr>
                            <th>Descripción</th>
                            <th>Opciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var actividad in modeloNegocio.Canales)
                        {
                            <tr>
                                <td>@actividad.Descripcion</td>
                                <td>
                                    <button class="btn-opcion" @onclick="() => EliminarCanal(actividad)">💬</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="form-actions">
                <button class="btn-guardar" @onclick="GuardarIngresos">Guardar</button>
            </div>
        </div>
    </div>
}



@if (mostrarModalRelacionCliente)
{
    <div class="modal-overlay">
        <div class="modal-content actividades-content">
            <h3 class="modal-titulo">Menú de Configuración</h3>

            <div class="actividades-container">
                <h4>Relacion Cliente</h4>

                <div class="actividades-actions">
                    <button class="btn-agregar" @onclick="CerrarModalRelacionCliente">Volver</button>
                    <button class="btn-agregar" @onclick="MostrarModalAgregarRelacionCliente">Agregar</button>
                </div>

                <div class="actividades-table-container">
                    <table class="actividades-table">
                        <thead>
                            <tr>
                                <th>Descripción</th>
                                <th>Opciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var ingresos in modeloNegocio.Relaciones)
                            {
                                <tr>
                                    <td>@ingresos.Descripcion</td>
                                    <td>
                                        <button class="btn-eliminar" @onclick="() => EliminarRelacionCliente(ingresos)">✅</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarModalAgregarRelacionCliente)
{
    <div class="modal-overlay">
        <div class="modal-content actividades-clave-content">
            <h3 class="modal-titulo">Relacion Cliente</h3>

            <div class="agregar-actividad">
                <div class="agregar-input-container">
                    <InputText class="form-control" @bind-Value="nuevaRelacionClienteDescripcion"
                               placeholder="Ej: Cafetera industrial" />
                    <button class="btn-agregar" @onclick="AgregarRelacionCliente">Agregar</button>
                </div>
            </div>

            <div class="actividades-table-container">
                <table class="actividades-table">
                    <thead>
                        <tr>
                            <th>Descripción</th>
                            <th>Opciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var actividad in modeloNegocio.Relaciones)
                        {
                            <tr>
                                <td>@actividad.Descripcion</td>
                                <td>
                                    <button class="btn-opcion" @onclick="() => EliminarRelacionCliente(actividad)">💬</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="form-actions">
                <button class="btn-guardar" @onclick="GuardarRelacionCliente">Guardar</button>
            </div>
        </div>
    </div>
}




@if (mostrarModalSegmentoMercado)
{
    <div class="modal-overlay">
        <div class="modal-content propuesta-valor-content">
            <h3 class="modal-titulo">Menú de Configuración</h3>

            <div class="propuesta-valor-container">
                <h4>¿Cuál es tu Segmento de mercado?</h4>

                <div class="form-group">
                    <textarea class="form-control propuesta-textarea"
                              @bind="modeloNegocio.SegmentoMercado.Descripcion"
                              placeholder="Describe tu Segmento de mercado..."></textarea>
                </div>

                <div class="propuesta-guardar">
                    <button class="btn-guardar" @onclick="GuardarSegmentoMercado">Guardar</button>
                </div>
            </div>

            <div class="form-actions">
                <button class="btn btn-secondary" @onclick="CerrarModalSegmentoMercado">Cerrar</button>
            </div>
        </div>
    </div>
}





@code {
    public List<Cliente> clientes = new List<Cliente>();
    public Cliente cliente { get; set; } = new Cliente();
    public ModeloNegocio modeloNegocio { get; set; } = new ModeloNegocio();
    private ActividadClave nuevaActividad = new ActividadClave();
    private CanalDistribucion nuevaCanal = new CanalDistribucion();
    private IngresoPrecio nuevaIngreso = new IngresoPrecio();
    private RelacionCliente nuevaRelacion = new RelacionCliente();
    public string gusto { get; set; } = "";
    bool mostrarModal = false;
    bool mostrarModalConfiguracion = false;
    private string nuevoGusto = string.Empty;

    private bool mostrarModalCliente = false;
    private bool mostrarModalPropuestaValor = false;
    private bool mostrarModalActividades = false;
    private bool mostrarModalCanalDis = false;
    private bool mostrarModalIngresos = false;
    private bool mostrarModalRelacionCliente = false;
    private bool mostrarModalSegmentoMercado = false;


    private bool mostrarModalAgregarActividad = false;
    private bool mostrarModalAgregarCanal = false;
    private bool mostrarModalAgregarIngresos = false;
    private bool mostrarModalAgregarRelacionCliente = false;
    private string nuevaActividadDescripcion = "";
    private string nuevaCanalDescripcion = "";
    private string nuevaIngresoDescripcion = "";
    private string nuevaRelacionClienteDescripcion = "";

    protected override async Task OnInitializedAsync()
    {
        await CargarClientes();
        await Task.Delay(100);

        await CargarModeloNegocio();
        await Task.Delay(100);

        await IniciarSimulacion();
    }


    private string ObtenerColorPorcentaje(double porcentaje)
    {
        if (porcentaje <= 30)
            return "rojo";
        else if (porcentaje <= 50)
            return "anaranjado";
        else if (porcentaje <= 79)
            return "amarillo";
        else
            return "verde";
    }

    void MostrarModal()
    {
        mostrarModal = true;
        cliente = new Cliente();
        cliente.DetallesGusto = new List<Gusto>();
        gusto = "";
        StateHasChanged();
    }

    void MostrarModalConfiguracion()
    {
        mostrarModalConfiguracion = true;
        cliente = new Cliente();
        cliente.DetallesGusto = new List<Gusto>();
        gusto = "";
        StateHasChanged();
    }

    void CerrarModal() => mostrarModal = false;
    void CerrarModalConfiguracion() => mostrarModalConfiguracion = false;

    private void AgregarGusto()
    {
        if (!string.IsNullOrWhiteSpace(gusto))
        {
            cliente.DetallesGusto ??= new List<Gusto>();
            cliente.DetallesGusto.Add(new Gusto { Descripcion = gusto });
            gusto = string.Empty;
            StateHasChanged();
        }
    }

    void EliminarGusto(Gusto gustoEliminar)
    {
        cliente.DetallesGusto?.Remove(gustoEliminar);
    }

    private async Task CargarClientes()
    {
        clientes = await clienteService.Listar(e => true);

        //Borrar despues
        cliente = await clienteService.Buscar(1);
        StateHasChanged();
    }

    private async Task CargarModeloNegocio()
    {
        modeloNegocio = await modeloNegocioService.Buscar(1); ;
        StateHasChanged();
    }

    async Task IniciarSimulacion()
    {
        var segmento = await segmentoMercadoService.Buscar(modeloNegocio.SegmentoMercadoId);
        var propuesta = await propuestaValorService.Buscar(modeloNegocio.PropuestaValorId);

        foreach (var cli in clientes)
        {
            cli.CoincidenciasSegmento = new List<CoincidenciaSegmentoMercado>(); // Limpiar resultados anteriores

            bool coincideEdad = CoincideEdadConSegmento(segmento.Descripcion, cli.Edad ?? 0);

            if (coincideEdad)
            {
                cli.CoincidenciasSegmento.Add(new CoincidenciaSegmentoMercado
                    {
                        ClienteId = cli.ClienteId,
                        Descripcion = "El cliente está en el rango de edad"
                    });
            }

            var gustosCoincidentes = ObtenerGustosCoincidentes(segmento.Descripcion, cli.DetallesGusto);

            foreach (var coincidencia in gustosCoincidentes)
            {
                cli.CoincidenciasSegmento.Add(new CoincidenciaSegmentoMercado
                    {
                        ClienteId = cli.ClienteId,
                        Descripcion = coincidencia
                    });
            }

            var propuestaCoincidencias = EvaluarPropuestaDeValor(cli, propuesta);
            foreach (var coincidencia in propuestaCoincidencias)
            {
                cli.CoincidenciasPropuestaValor.Add(new CoincidenciaPropuestaValor
                    {
                        ClienteId = cli.ClienteId,
                        Descripcion = coincidencia
                    });
            }

            var coincidenciasCanales = EvaluarCanalesDistribucion(cli);

            foreach (var coincidencia in coincidenciasCanales)
            {
                cli.CoincidenciasCanales.Add(new CoincidenciaCanalesDistribucion
                    {
                        ClienteId = cli.ClienteId,
                        Descripcion = coincidencia
                    });
            }

            var coincidenciasActividades = EvaluarActividadesValor(cli);

            foreach (var coincidencia in coincidenciasActividades)
            {
                cli.CoincidenciasActividades.Add(new CoincidenciaActividadesValor
                    {
                        ClienteId = cli.ClienteId,
                        Descripcion = coincidencia
                    });
            }

            int totalCoincidencias = 0;

            if (cli.CoincidenciasSegmento.Any())
                totalCoincidencias++;

            if (cli.CoincidenciasPropuestaValor.Any())
                totalCoincidencias++;

            if (cli.CoincidenciasCanales.Any())
                totalCoincidencias++;

            if (cli.CoincidenciasActividades.Any())
                totalCoincidencias++;

            cli.PorcentajeCoincidencias = Math.Min(((double)totalCoincidencias / 4) * 100, 100);
        }

        StateHasChanged();
    }

    public List<string> EvaluarPropuestaDeValor(Cliente cliente, PropuestaValor propuesta)
    {
        var coincidencias = new List<string>();

        if (propuesta == null || string.IsNullOrWhiteSpace(propuesta.Descripcion))
            return coincidencias;

        // Limpiar y convertir todo a minúsculas sin tildes
        var descripcionPropuesta = QuitarAcentos(propuesta.Descripcion.ToLower());

        // Convertir gustos en palabras individuales, sin tildes
        var gustos = cliente.DetallesGusto
            .Where(g => !string.IsNullOrWhiteSpace(g.Descripcion))
            .SelectMany(g => QuitarAcentos(g.Descripcion.ToLower()).Split(' '))
            .Distinct()
            .ToList();

        foreach (var palabra in gustos)
        {
            if (descripcionPropuesta.Contains(palabra))
            {
                coincidencias.Add($"Coincide con la propuesta de valor: {palabra}");
            }
        }

        return coincidencias;
    }

    public static string QuitarAcentos(string texto)
    {
        var normalized = texto.Normalize(System.Text.NormalizationForm.FormD);
        var sb = new StringBuilder();

        foreach (var c in normalized)
        {
            if (System.Globalization.CharUnicodeInfo.GetUnicodeCategory(c) != System.Globalization.UnicodeCategory.NonSpacingMark)
            {
                sb.Append(c);
            }
        }

        return sb.ToString().Normalize(System.Text.NormalizationForm.FormC);
    }

    // List<string> EvaluarPropuestaDeValor(Cliente cliente)
    // {
    //     var palabrasClave = new List<string>
    // {
    //     "cafe", "cafe artesanal", "artesanal", "alta calidad", "calidad",
    //     "rápido", "menos de 20 minutos", "20 minutos", "entrega rápida",
    //     "domicilio", "a domicilio", "personalizado", "personalizadas",
    //     "opciones personalizadas", "atención amigable", "servicio amable",
    //     "servicio personalizado", "trato cercano", "experiencia agradable"
    // };

    //     var gustos = cliente.DetallesGusto.Select(g => g.Descripcion.ToLower()).ToList();
    //     var coincidencias = new List<string>();

    //     foreach (var palabraClave in palabrasClave)
    //     {
    //         foreach (var gusto in gustos)
    //         {
    //             if (gusto.Contains(palabraClave.ToLower()))
    //             {
    //                 coincidencias.Add($"Coincide con la propuesta de valor: {palabraClave}");
    //                 break; // evitar duplicados
    //             }
    //         }
    //     }

    //     return coincidencias;
    // }

    List<string> EvaluarCanalesDistribucion(Cliente cliente)
    {
        var palabrasClave = new List<string>
    {
        "instagram", "facebook", "tiktok", "redes sociales",
        "app", "aplicacion", "pagina web", "web", "internet",
        "whatsapp", "mensaje", "tienda física", "presencial", "local"
    };

        var gustos = cliente.DetallesGusto.Select(g => g.Descripcion.ToLower()).ToList();
        var coincidencias = new List<string>();

        foreach (var palabraClave in palabrasClave)
        {
            foreach (var gusto in gustos)
            {
                if (gusto.Contains(palabraClave.ToLower()))
                {
                    coincidencias.Add($"Coincide con canal de distribución: {palabraClave}");
                    break;
                }
            }
        }

        return coincidencias;
    }

    public List<string> EvaluarActividadesValor(Cliente cliente)
    {
        var palabrasClave = new List<string>
    {
        "produccion", "logistica", "distribucion", "marketing", "publicidad",
        "atencion", "clientes", "servicio", "ventas", "promocion",
        "redes", "sociales", "campañas", "digitales", "contenido",
        "gestionar", "coordinar", "ofrecer", "desarrollar", "mejorar",
        "preparar", "cocinar"
    };

        var gustos = cliente.DetallesGusto
                            .Where(g => !string.IsNullOrWhiteSpace(g.Descripcion))
                            .SelectMany(g => g.Descripcion
                                              .ToLower()
                                              .Split(' ', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries))
                            .Distinct()
                            .ToList();

        var coincidencias = new List<string>();

        foreach (var palabraClave in palabrasClave)
        {
            if (gustos.Any(g => g == palabraClave))
            {
                coincidencias.Add($"Coincide con actividad de valor: {palabraClave}");
            }
        }

        return coincidencias;
    }

    public class SegmentoEdad
    {
        public string Nombre { get; set; }
        public int EdadMin { get; set; }
        public int EdadMax { get; set; }
    }

    public class EvaluadorSegmento
    {
        private List<SegmentoEdad> segmentosEdad = new List<SegmentoEdad>
        {
            new SegmentoEdad { Nombre = "niño", EdadMin = 5, EdadMax = 10 },
            new SegmentoEdad { Nombre = "adolescente", EdadMin = 11, EdadMax = 17 },
            new SegmentoEdad { Nombre = "joven", EdadMin = 18, EdadMax = 35 },
            new SegmentoEdad { Nombre = "adulto", EdadMin = 36, EdadMax = 50 },
            new SegmentoEdad { Nombre = "mayor", EdadMin = 51, EdadMax = 120 }
        };
    }

    public bool CoincideEdadConSegmento(string descripcionSegmento, int edadCliente)
    {
        var segmentosEdad = new List<SegmentoEdad>
    {
        new SegmentoEdad { Nombre = "niño", EdadMin = 5, EdadMax = 10 },
        new SegmentoEdad { Nombre = "adolescente", EdadMin = 11, EdadMax = 17 },
        new SegmentoEdad { Nombre = "joven", EdadMin = 18, EdadMax = 35 },
        new SegmentoEdad { Nombre = "adulto", EdadMin = 36, EdadMax = 50 },
        new SegmentoEdad { Nombre = "mayor", EdadMin = 51, EdadMax = 120 }
    };

        string primeraPalabra = descripcionSegmento.Split(' ', StringSplitOptions.RemoveEmptyEntries)[0]
            .ToLower()
            .TrimEnd('.', ',');

        var segmento = segmentosEdad.FirstOrDefault(s => primeraPalabra.Contains(s.Nombre));
        return segmento != null && edadCliente >= segmento.EdadMin && edadCliente <= segmento.EdadMax;
    }

    public List<string> ObtenerGustosCoincidentes(string descripcionSegmento, ICollection<Gusto> gustosCliente)
    {
        var coincidencias = new List<string>();

        if (gustosCliente == null || gustosCliente.Count == 0)
            return coincidencias;

        var interesesClave = new List<string>
    {
        "cafe", "digitales", "servicios rápidos", "trabajar desde casa", "oficina"
    };

        foreach (var gusto in gustosCliente)
        {
            string descripcionGusto = gusto.Descripcion?.ToLower() ?? "";
            foreach (var interes in interesesClave)
            {
                if (descripcionGusto.Contains(interes.ToLower()))
                {
                    coincidencias.Add($"Coincide con: \"{interes}\" por el gusto \"{gusto.Descripcion}\"");
                }
            }
        }

        return coincidencias;
    }

    private async Task Guardar()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(cliente.Nombre))
            {
                Console.WriteLine($"Error al guardar: Nombre nulo");
                return;
            }

            await clienteService.Crear(cliente);
            await CargarClientes();
            mostrarModal = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar: {ex.Message}");
        }
    }

    //--------Propuesta de Valor--------//

    void MostrarModalPropuestaValor()
    {
        mostrarModalPropuestaValor = true;
        StateHasChanged();
    }
    void CerrarModalPropuestaValor()
    {
        mostrarModalPropuestaValor = false;
        StateHasChanged();
    }

    async Task GuardarPropuestaValor()
    {
        try
        {
            if (modeloNegocio?.PropuestaValor != null)
            {
                await propuestaValorService.Modificar(modeloNegocio.PropuestaValor);
                Console.WriteLine("Propuesta de valor guardada correctamente");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar propuesta de valor: {ex.Message}");
        }
    }

    //--------Actividades--------//
    void MostrarModalActividades()
    {
        mostrarModalActividades = true;
        StateHasChanged();
    }
    void CerrarModalActividades()
    {
        mostrarModalActividades = false;
        StateHasChanged();
    }
    void MostrarModalAgregarActividad()
    {
        nuevaActividad = new ActividadClave();
        mostrarModalAgregarActividad = true;
        StateHasChanged();
    }
    async Task EliminarActividad(ActividadClave actividad)
    {
        try
        {
            modeloNegocio.Actividades.Remove(actividad);
            await modeloNegocioService.Modificar(modeloNegocio);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar actividad: {ex.Message}");
        }
    }
    void AgregarActividad()
    {
        if (!string.IsNullOrWhiteSpace(nuevaActividadDescripcion))
        {
            modeloNegocio.Actividades.Add(new ActividadClave
                {
                    Descripcion = nuevaActividadDescripcion
                });
            nuevaActividadDescripcion = string.Empty; // Limpiar después de agregar
            StateHasChanged();
        }
    }
    async Task GuardarActividades()
    {
        try
        {
            // Agregar las actividades predefinidas si no existen
            var actividadesPredefinidas = new List<string> { ""};

            foreach (var actividad in actividadesPredefinidas)
            {
                if (!modeloNegocio.Actividades.Any(a => a.Descripcion == actividad))
                {
                    modeloNegocio.Actividades.Add(new ActividadClave
                        {
                            Descripcion = actividad
                        });
                }
            }

            // Guardar a través del ModeloNegocio
            await modeloNegocioService.Modificar(modeloNegocio);
            CerrarModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar actividades: {ex.Message}");
        }
    }

    //-----Canal de distribucion-----------//
    void MostrarModalCanalDis()
    {
        mostrarModalCanalDis = true;
        StateHasChanged();
    }
    void CerrarModalCanalDis()
    {
        mostrarModalCanalDis = false;
        StateHasChanged();
    }
    void MostrarModalAgregarCanal()
    {
        nuevaCanal = new CanalDistribucion();
        mostrarModalAgregarCanal = true;
        StateHasChanged();
    }
    void AgregarCanal()
    {
        if (!string.IsNullOrWhiteSpace(nuevaCanalDescripcion))
        {
            modeloNegocio.Canales.Add(new CanalDistribucion
                {
                    Descripcion = nuevaCanalDescripcion
                });
            nuevaCanalDescripcion = string.Empty; // Limpiar después de agregar
            StateHasChanged();
        }
    }
    async Task EliminarCanal(CanalDistribucion canal)
    {
        try
        {
            modeloNegocio.Canales.Remove(canal);
            await modeloNegocioService.Modificar(modeloNegocio);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar canal: {ex.Message}");
        }
    }
    async Task GuardarCanal()
    {
        try
        {
            // Agregar las actividades predefinidas si no existen
            var actividadesPredefinidas = new List<string> { "" };

            foreach (var canal in actividadesPredefinidas)
            {
                if (!modeloNegocio.Canales.Any(a => a.Descripcion == canal))
                {
                    modeloNegocio.Canales.Add(new CanalDistribucion
                        {
                            Descripcion = canal
                        });
                }
            }

            // Guardar a través del ModeloNegocio
            await modeloNegocioService.Modificar(modeloNegocio);
            CerrarModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar el canal: {ex.Message}");
        }
    }

    //-------Ingresos---------------//
    void MostrarModalIngresos()
    {
        StateHasChanged();
        mostrarModalIngresos = true;
    }
    void CerrarModalIngresos()
    {
        mostrarModalCanalDis = false;
        StateHasChanged();
    }
    void MostrarModalAgregarIngresos()
    {
        nuevaIngreso = new IngresoPrecio();
        mostrarModalAgregarIngresos = true;
        StateHasChanged();
    }
    async Task EliminarIngresos(IngresoPrecio ingreso)
    {
        try
        {
            modeloNegocio.Ingresos.Remove(ingreso);
            await modeloNegocioService.Modificar(modeloNegocio);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar el ingreso: {ex.Message}");
        }
    }
    void AgregarIngresos()
    {
        if (!string.IsNullOrWhiteSpace(nuevaIngresoDescripcion))
        {
            modeloNegocio.Ingresos.Add(new IngresoPrecio
                {
                    Descripcion = nuevaIngresoDescripcion
                });
            nuevaIngresoDescripcion = string.Empty; // Limpiar después de agregar
            StateHasChanged();
        }
    }
    async Task GuardarIngresos()
    {
        try
        {
            var actividadesPredefinidas = new List<string> { "" };

            foreach (var ingreso in actividadesPredefinidas)
            {
                if (!modeloNegocio.Ingresos.Any(a => a.Descripcion == ingreso))
                {
                    modeloNegocio.Ingresos.Add(new IngresoPrecio
                        {
                            Descripcion = ingreso
                        });
                }
            }

            // Guardar a través del ModeloNegocio
            await modeloNegocioService.Modificar(modeloNegocio);
            CerrarModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar el ingreso: {ex.Message}");
        }
    }


    //---------Relacion Cliente---------------//
    void MostrarModalRelacionCliente()
    {
        mostrarModalRelacionCliente = true;
        StateHasChanged();
    }
    void CerrarModalRelacionCliente()
    {
        mostrarModalRelacionCliente = false;
        StateHasChanged();
    }
    void MostrarModalAgregarRelacionCliente()
    {
        nuevaRelacion = new RelacionCliente();
        mostrarModalAgregarRelacionCliente = true;
        StateHasChanged();
    }
    async Task EliminarRelacionCliente(RelacionCliente relacion)
    {
        try
        {
            modeloNegocio.Relaciones.Remove(relacion);
            await modeloNegocioService.Modificar(modeloNegocio);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar la relacion: {ex.Message}");
        }
    }
    void AgregarRelacionCliente()
    {
        if (!string.IsNullOrWhiteSpace(nuevaRelacionClienteDescripcion))
        {
            modeloNegocio.Relaciones.Add(new RelacionCliente
                {
                    Descripcion = nuevaRelacionClienteDescripcion
                });
            nuevaRelacionClienteDescripcion = string.Empty; // Limpiar después de agregar
            StateHasChanged();
        }
    }
    async Task GuardarRelacionCliente()
    {
        try
        {
            var actividadesPredefinidas = new List<string> { "" };

            foreach (var relacion in actividadesPredefinidas)
            {
                if (!modeloNegocio.Relaciones.Any(a => a.Descripcion == relacion))
                {
                    modeloNegocio.Relaciones.Add(new RelacionCliente
                        {
                            Descripcion = relacion
                        });
                }
            }

            // Guardar a través del ModeloNegocio
            await modeloNegocioService.Modificar(modeloNegocio);
            CerrarModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar la relacion: {ex.Message}");
        }
    }

    //--------Propuesta de Valor--------//

    void MostrarModalSegmentoMercado()
    {
        mostrarModalSegmentoMercado = true;
        StateHasChanged();
    }
    void CerrarModalSegmentoMercado()
    {
        mostrarModalSegmentoMercado = false;
        StateHasChanged();
    }
    async Task GuardarSegmentoMercado()
    {
        try
        {
            if (modeloNegocio?.SegmentoMercado != null)
            {
                await segmentoMercadoService.Modificar(modeloNegocio.SegmentoMercado);
                Console.WriteLine("Segmento de mercado guardada correctamente");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar el segmento de mercado: {ex.Message}");
        }
    }
}