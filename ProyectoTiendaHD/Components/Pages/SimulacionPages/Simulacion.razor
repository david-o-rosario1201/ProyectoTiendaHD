@page "/"
@using System.Text
@rendermode InteractiveServer
@inject NavigationManager navigation
@inject ModeloNegocioService modeloNegocioService
@inject UsuarioService usuarioService
@inject SegmentoMercadoService segmentoMercadoService
@inject PropuestaValorService propuestaValorService
@inject ClienteService clienteService

<PageTitle>Simulaci&oacute;n</PageTitle>

<h1 class="titulo-principal text-center">
    <strong>Bienvenido a la Simulación<br />de tu Modelo de Negocio</strong>
</h1>



<hr class="separador" />

<div class="row-flex">
    <!-- Segmento de Mercado -->
    <div class="col-box">
        <h2 class="seccion-titulo text-center">
            <strong>📊 Segmento de Mercado</strong>
        </h2>
        <div class="highlight-box p-3">
            <p class="descripcion"><i>"@segmentoMercado.Descripcion"</i></p>
        </div>
    </div>

    <!-- Propuesta de Valor -->
    <div class="col-box">
        <h2 class="seccion-titulo text-center">
            <strong>🎯 Propuesta de Valor</strong>
        </h2>
        <div class="highlight-box p-3">
            <p class="descripcion"><i>"@propuestaValor.Descripcion"</i></p>
        </div>
    </div>
</div>

<hr class="separador" />


<div class="card-container mt-4">
    <div class="card text-center p-3 shadow-sm">
        <strong class="h6">🧑‍🤝‍🧑 Clientes</strong>
        <p class="mt-1 mb-2">Cantidad: @clientes.Count</p>
        <button class="btn btn-primary btn-sm" @onclick="MostrarModal">Agregar</button>
    </div>

    <div class="card text-center p-3 shadow-sm">
        <strong class="h6">⚙️ Configuración</strong>
        <button class="btn btn-secondary btn-sm mt-2" @onclick="MostrarModalConfiguracion">Cambiar</button>
    </div>
</div>







<!-- 🧾 Mostrar datos del cliente debajo -->
@if (clientes != null && clientes.Any())
{
    @foreach (var cliente in clientes)
    {
        <div class="card-body mb-4 p-4 bg-light border rounded">
            <h4 class="titulo-cliente text-primary mb-3">
                <strong>👤 Datos del Cliente</strong>
            </h4>
            <ul class="list-unstyled">
                <li class="mb-2">
                    <span class="cliente-nombre"><strong>Nombre:</strong> @cliente.Nombre</span>
                </li>
                <li class="mb-3">
                    <span class="subtitulo-gustos"><strong>✨ Gustos que coinciden:</strong></span>
                </li>
                <li>
                    <strong>Segmento de mercado:</strong>
                    <ul class="pl-4">
                        @if (cliente.CoincidenciasSegmento != null && cliente.CoincidenciasSegmento.Any())
                        {
                            @foreach (var coincidencia in cliente.CoincidenciasSegmento)
                            {
                                <li>@coincidencia.Descripcion</li>
                            }
                        }
                        else
                        {
                            <li>No hay coincidencias con el segmento.</li>
                        }
                    </ul>
                </li>

                <li>
                    <strong>Propuesta de Valor:</strong>
                    <ul class="pl-4">
                        @if (cliente.CoincidenciasPropuestaValor != null && cliente.CoincidenciasPropuestaValor.Any())
                        {
                            @foreach (var coincidencia in cliente.CoincidenciasPropuestaValor)
                            {
                                <li>@coincidencia.Descripcion</li>
                            }
                        }
                        else
                        {
                            <li>No hay coincidencias con la propuesta de valor.</li>
                        }
                    </ul>
                </li>

                <li>
                    <strong>Canales de distribución:</strong>
                    <ul class="pl-4">
                        @if (cliente.CoincidenciasCanales != null && cliente.CoincidenciasCanales.Any())
                        {
                            @foreach (var coincidencia in cliente.CoincidenciasCanales)
                            {
                                <li>@coincidencia.Descripcion</li>
                            }
                        }
                        else
                        {
                            <li>No hay coincidencias con los canales de distribución.</li>
                        }
                    </ul>
                </li>

                <li>
                    <strong>Actividades claves:</strong>
                    <ul class="pl-4">
                        @if (cliente.CoincidenciasActividades != null && cliente.CoincidenciasActividades.Any())
                        {
                            @foreach (var coincidencia in cliente.CoincidenciasActividades)
                            {
                                <li>@coincidencia.Descripcion</li>
                            }
                        }
                        else
                        {
                            <li>No hay coincidencias con las actividades clave.</li>
                        }
                    </ul>
                </li>

                <li>
                    <strong>Porcentaje de coincidencias:</strong>
                    <span>@cliente.PorcentajeCoincidencias (%)</span>
                    <span class="color-circulo @ObtenerColorPorcentaje(cliente.PorcentajeCoincidencias ?? 0)"></span>
                </li>
            </ul>
        </div>
    }
}
else
{
    <p class="text-center text-muted">No hay clientes disponibles.</p>
}


@if (mostrarModal)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3 class="modal-titulo">Creación de Cliente</h3>

            <div class="form-row">
                <div class="form-group">
                    <label><strong>Nombre</strong></label>
                    <InputText class="form-control" placeholder="Miguel Jiménez" @bind-Value="cliente.Nombre" />
                </div>
                <div class="form-group">
                    <label><strong>Edad</strong></label>
                    <InputNumber class="form-control" placeholder="45" @bind-Value="cliente.Edad" />
                </div>
            </div>

            <hr class="divider" />


            <div class="form-group">
                <label>¿Cuáles son sus gustos?</label>
                <div class="form-row">
                    <input class="form-input flex-fill" @bind="gusto" placeholder="Gustos" />
                    <button class="btn-agregar" @onclick="AgregarGusto">Agregar</button>
                </div>
            </div>

            @if (cliente.DetallesGusto.Any())
            {
                <div class="tabla-gustos">
                    <table>
                        <thead>
                            <tr>
                                <th>Gustos</th>
                                <th>Opciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var gusto in cliente.DetallesGusto)
                            {
                                <tr>
                                    <td>@gusto.Descripcion</td>
                                    <td>
                                        <button class="btn-eliminar" @onclick="() => EliminarGusto(gusto)">🗑️</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }

            <div class="form-actions justify-content-center">
                <button class="btn-guardar" @onclick="Guardar">Guardar</button>
                <button class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
            </div>
        </div>
    </div>
}


@if (mostrarModalConfiguracion)
{
    <div class="modal-overlay">
        <div class="modal-content configuracion-content">
            <h3 class="modal-titulo">Menú de Configuración</h3>

            <div class="configuracion-menu">
                <div class="configuracion-seccion">
                    <h4>Propuesta de valor</h4>
                    <ul class="configuracion-opciones">
                        <button class="btn" @onclick="MostrarModalPropuestaValor">Ver</button>
                    </ul>
                </div>

                <div class="configuracion-seccion">
                    <h4>Actividades Claves</h4>
                    <ul class="configuracion-opciones">
                        <button class="btn" @onclick="MostrarModalActividades">Ver</button>
                    </ul>
                </div>
            </div>

            <div class="form-actions">
                <button class="btn btn-secondary" @onclick="CerrarModalConfiguracion">Cerrar</button>
            </div>
        </div>
    </div>
}

@{
    var resultado = CalcularFactibilidad(clientes);
    double promedio = resultado.Promedio;
    string estado = resultado.Estado;
}

<div class="factibilidad-box text-center mt-4">
    <h4><strong>Factibilidad del Modelo de Negocio</strong></h4>
    <div class="factibilidad-estado @ObtenerColorPorcentaje(promedio)">
        <strong>@estado</strong> (@promedio.ToString("0.0")%)
    </div>
</div>

@code {
    public List<Cliente> clientes = new List<Cliente>();
    public Cliente cliente { get; set; } = new Cliente();
    public SegmentoMercado segmentoMercado { get; set; } = new SegmentoMercado();
    public PropuestaValor propuestaValor { get; set; } = new PropuestaValor();
    public ModeloNegocio modeloNegocio { get; set; } = new ModeloNegocio();
    public string gusto { get; set; } = "";
    bool mostrarModal = false;
    bool mostrarModalConfiguracion = false;
    private string nuevoGusto = string.Empty;

    private bool mostrarModalCliente = false;
    private bool mostrarModalPropuestaValor = false;
    private bool mostrarModalActividades = false;

    private string tipoPropuestaValor = "";
    private string tituloPropuestaValor = "";
    private string tipoActividades = "";
    private string tituloActividades = "";

    protected override async Task OnInitializedAsync()
    {
        await CargarClientes();
        await Task.Delay(100);

        await CargarModeloNegocio();
        await Task.Delay(100);

        await IniciarSimulacion();
    }

    private (double Promedio, string Estado) CalcularFactibilidad(List<Cliente> clientes)
    {
        if (clientes == null || clientes.Count == 0)
            return (0, "Sin datos");

        double promedio = clientes.Average(c => c.PorcentajeCoincidencias ?? 0);
        string estado;

        if (promedio >= 80)
            estado = "Alta";
        else if (promedio >= 60)
            estado = "Moderada";
        else if (promedio >= 40)
            estado = "Baja";
        else
            estado = "No factible";

        return (promedio, estado);
    }

    private string ObtenerColorPorcentaje(double porcentaje)
    {
        if (porcentaje <= 30)
            return "rojo";
        else if (porcentaje <= 50)
            return "anaranjado";
        else if (porcentaje <= 79)
            return "amarillo";
        else
            return "verde";
    }

    void MostrarModal()
    {
        mostrarModal = true;
        cliente = new Cliente();
        cliente.DetallesGusto = new List<Gusto>();
        gusto = "";
        StateHasChanged();
    }

    void MostrarModalConfiguracion()
    {
        mostrarModalConfiguracion = true;
        cliente = new Cliente();
        cliente.DetallesGusto = new List<Gusto>();
        gusto = "";
        StateHasChanged();
    }

    void CerrarModal() => mostrarModal = false;
    void CerrarModalConfiguracion() => mostrarModalConfiguracion = false;

    private void AgregarGusto()
    {
        if (!string.IsNullOrWhiteSpace(gusto))
        {
            cliente.DetallesGusto ??= new List<Gusto>();
            cliente.DetallesGusto.Add(new Gusto { Descripcion = gusto });
            gusto = string.Empty;
            StateHasChanged();
        }
    }

    void EliminarGusto(Gusto gustoEliminar)
    {
        cliente.DetallesGusto?.Remove(gustoEliminar);
    }

    private async Task CargarClientes()
    {
        clientes = await clienteService.Listar(e => true);

        //Borrar despues
        cliente = await clienteService.Buscar(1);
        StateHasChanged();
    }

    private async Task CargarModeloNegocio()
    {
        modeloNegocio = await modeloNegocioService.Buscar(1); ;
        StateHasChanged();
    }

    async Task IniciarSimulacion()
    {
        var segmento = await segmentoMercadoService.Buscar(modeloNegocio.SegmentoMercadoId);
        var propuesta = await propuestaValorService.Buscar(modeloNegocio.PropuestaValorId);

        segmentoMercado = segmento;
        propuestaValor = propuesta;

        foreach (var cli in clientes)
        {
            cli.CoincidenciasSegmento = new List<CoincidenciaSegmentoMercado>(); // Limpiar resultados anteriores

            bool coincideEdad = CoincideEdadConSegmento(segmento.Descripcion, cli.Edad ?? 0);

            if (coincideEdad)
            {
                cli.CoincidenciasSegmento.Add(new CoincidenciaSegmentoMercado
                    {
                        ClienteId = cli.ClienteId,
                        Descripcion = "El cliente está en el rango de edad"
                    });
            }

            var gustosCoincidentes = ObtenerGustosCoincidentes(segmento.Descripcion, cli.DetallesGusto);

            foreach (var coincidencia in gustosCoincidentes)
            {
                cli.CoincidenciasSegmento.Add(new CoincidenciaSegmentoMercado
                    {
                        ClienteId = cli.ClienteId,
                        Descripcion = coincidencia
                    });
            }

            var propuestaCoincidencias = EvaluarPropuestaDeValor(cli, propuesta);
            foreach (var coincidencia in propuestaCoincidencias)
            {
                cli.CoincidenciasPropuestaValor.Add(new CoincidenciaPropuestaValor
                    {
                        ClienteId = cli.ClienteId,
                        Descripcion = coincidencia
                    });
            }

            var coincidenciasCanales = EvaluarCanalesDistribucion(cli);

            foreach (var coincidencia in coincidenciasCanales)
            {
                cli.CoincidenciasCanales.Add(new CoincidenciaCanalesDistribucion
                    {
                        ClienteId = cli.ClienteId,
                        Descripcion = coincidencia
                    });
            }

            var coincidenciasActividades = EvaluarActividadesValor(cli);

            foreach (var coincidencia in coincidenciasActividades)
            {
                cli.CoincidenciasActividades.Add(new CoincidenciaActividadesValor
                    {
                        ClienteId = cli.ClienteId,
                        Descripcion = coincidencia
                    });
            }

            int totalCoincidencias = 0;

            if (cli.CoincidenciasSegmento.Any())
                totalCoincidencias++;

            if (cli.CoincidenciasPropuestaValor.Any())
                totalCoincidencias++;

            if (cli.CoincidenciasCanales.Any())
                totalCoincidencias++;

            if (cli.CoincidenciasActividades.Any())
                totalCoincidencias++;

            cli.PorcentajeCoincidencias = Math.Min(((double)totalCoincidencias / 4) * 100, 100);
        }

        StateHasChanged();
    }

    public List<string> EvaluarPropuestaDeValor(Cliente cliente, PropuestaValor propuesta)
    {
        var coincidencias = new List<string>();

        if (propuesta == null || string.IsNullOrWhiteSpace(propuesta.Descripcion))
            return coincidencias;

        // Limpiar y convertir la propuesta a minúsculas sin tildes
        var descripcionPropuesta = QuitarAcentos(propuesta.Descripcion.ToLower());

        foreach (var gusto in cliente.DetallesGusto)
        {
            if (string.IsNullOrWhiteSpace(gusto.Descripcion))
                continue;

            var descripcionGusto = QuitarAcentos(gusto.Descripcion.ToLower());
            var palabrasGusto = descripcionGusto.Split(' ', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);

            foreach (var palabra in palabrasGusto.Distinct())
            {
                if (descripcionPropuesta.Contains(palabra))
                {
                    coincidencias.Add($"Coincide con la propuesta de valor: \"{palabra}\" por el gusto \"{gusto.Descripcion}\"");
                }
            }
        }

        return coincidencias;
    }


    public static string QuitarAcentos(string texto)
    {
        var normalized = texto.Normalize(System.Text.NormalizationForm.FormD);
        var sb = new StringBuilder();

        foreach (var c in normalized)
        {
            if (System.Globalization.CharUnicodeInfo.GetUnicodeCategory(c) != System.Globalization.UnicodeCategory.NonSpacingMark)
            {
                sb.Append(c);
            }
        }

        return sb.ToString().Normalize(System.Text.NormalizationForm.FormC);
    }



    // List<string> EvaluarPropuestaDeValor(Cliente cliente)
    // {
    //     var palabrasClave = new List<string>
    // {
    //     "cafe", "cafe artesanal", "artesanal", "alta calidad", "calidad",
    //     "rápido", "menos de 20 minutos", "20 minutos", "entrega rápida",
    //     "domicilio", "a domicilio", "personalizado", "personalizadas",
    //     "opciones personalizadas", "atención amigable", "servicio amable",
    //     "servicio personalizado", "trato cercano", "experiencia agradable"
    // };

    //     var gustos = cliente.DetallesGusto.Select(g => g.Descripcion.ToLower()).ToList();
    //     var coincidencias = new List<string>();

    //     foreach (var palabraClave in palabrasClave)
    //     {
    //         foreach (var gusto in gustos)
    //         {
    //             if (gusto.Contains(palabraClave.ToLower()))
    //             {
    //                 coincidencias.Add($"Coincide con la propuesta de valor: {palabraClave}");
    //                 break; // evitar duplicados
    //             }
    //         }
    //     }

    //     return coincidencias;
    // }

    List<string> EvaluarCanalesDistribucion(Cliente cliente)
    {
        var palabrasClave = new List<string>
    {
        "instagram", "facebook", "tiktok", "redes sociales",
        "app", "aplicacion", "pagina web", "web", "internet",
        "whatsapp", "mensaje", "tienda física", "presencial", "local"
    };

        var coincidencias = new List<string>();

        foreach (var gusto in cliente.DetallesGusto)
        {
            string descripcionGusto = gusto.Descripcion?.ToLower() ?? "";

            foreach (var palabraClave in palabrasClave)
            {
                if (descripcionGusto.Contains(palabraClave.ToLower()))
                {
                    coincidencias.Add($"Coincide con canal de distribución: \"{palabraClave}\" por el gusto \"{gusto.Descripcion}\"");
                }
            }
        }

        return coincidencias;
    }


    public List<string> EvaluarActividadesValor(Cliente cliente)
    {
        var palabrasClave = new List<string>
    {
        "produccion", "logistica", "distribucion", "marketing", "publicidad",
        "atencion", "clientes", "servicio", "ventas", "promocion",
        "redes", "sociales", "campañas", "digitales", "contenido",
        "gestionar", "coordinar", "ofrecer", "desarrollar", "mejorar",
        "preparar", "cocinar"
    };

        var coincidencias = new List<string>();

        foreach (var gusto in cliente.DetallesGusto)
        {
            string descripcionGusto = gusto.Descripcion?.ToLower() ?? "";

            foreach (var palabraClave in palabrasClave)
            {
                if (descripcionGusto.Contains(palabraClave.ToLower()))
                {
                    coincidencias.Add($"Coincide con: \"{palabraClave}\" por el gusto \"{gusto.Descripcion}\"");
                }
            }
        }

        return coincidencias;
    }

    public class SegmentoEdad
    {
        public string Nombre { get; set; }
        public int EdadMin { get; set; }
        public int EdadMax { get; set; }
    }

    public class EvaluadorSegmento
    {
        private List<SegmentoEdad> segmentosEdad = new List<SegmentoEdad>
        {
            new SegmentoEdad { Nombre = "niño", EdadMin = 5, EdadMax = 10 },
            new SegmentoEdad { Nombre = "adolescente", EdadMin = 11, EdadMax = 17 },
            new SegmentoEdad { Nombre = "joven", EdadMin = 18, EdadMax = 35 },
            new SegmentoEdad { Nombre = "adulto", EdadMin = 36, EdadMax = 50 },
            new SegmentoEdad { Nombre = "mayor", EdadMin = 51, EdadMax = 120 }
        };
    }

    public bool CoincideEdadConSegmento(string descripcionSegmento, int edadCliente)
    {
        var segmentosEdad = new List<SegmentoEdad>
    {
        new SegmentoEdad { Nombre = "niño", EdadMin = 5, EdadMax = 10 },
        new SegmentoEdad { Nombre = "adolescente", EdadMin = 11, EdadMax = 17 },
        new SegmentoEdad { Nombre = "joven", EdadMin = 18, EdadMax = 35 },
        new SegmentoEdad { Nombre = "adulto", EdadMin = 36, EdadMax = 50 },
        new SegmentoEdad { Nombre = "mayor", EdadMin = 51, EdadMax = 120 }
    };

        string primeraPalabra = descripcionSegmento.Split(' ', StringSplitOptions.RemoveEmptyEntries)[0]
            .ToLower()
            .TrimEnd('.', ',');

        var segmento = segmentosEdad.FirstOrDefault(s => primeraPalabra.Contains(s.Nombre));
        return segmento != null && edadCliente >= segmento.EdadMin && edadCliente <= segmento.EdadMax;
    }

    public List<string> ObtenerGustosCoincidentes(string descripcionSegmento, ICollection<Gusto> gustosCliente)
    {
        var coincidencias = new List<string>();

        if (gustosCliente == null || gustosCliente.Count == 0)
            return coincidencias;

        var interesesClave = new List<string>
    {
        "cafe", "digitales", "servicios rápidos", "trabajar desde casa", "oficina"
    };

        foreach (var gusto in gustosCliente)
        {
            string descripcionGusto = gusto.Descripcion?.ToLower() ?? "";
            foreach (var interes in interesesClave)
            {
                if (descripcionGusto.Contains(interes.ToLower()))
                {
                    coincidencias.Add($"Coincide con: \"{interes}\" por el gusto \"{gusto.Descripcion}\"");
                }
            }
        }

        return coincidencias;
    }


    private async Task Guardar()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(cliente.Nombre))
            {
                Console.WriteLine($"Error al guardar: Nombre nulo");
                return;
            }

            await clienteService.Crear(cliente);
            await CargarClientes();
            mostrarModal = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar: {ex.Message}");
        }
    }


    void MostrarModalPropuestaValor()
    {
        mostrarModalPropuestaValor = true;
    }

    void MostrarModalActividades()
    {
        mostrarModalActividades = true;
    }
}